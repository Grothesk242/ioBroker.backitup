{"version":3,"file":"static/js/src_Components_jsx.4267e220.chunk.js","mappings":"2lBAKA,MAAMA,UAAgCC,EAAA,CAAU,CAC5C,YAAYC,EAAO,CACf,MAAMA,CAAK,EACX,KAAK,YAAc,KAAK,MAAM,MAC9B,KAAK,cAAgB,EACzB,CAEA,oBAAqB,CACb,KAAK,MAAM,QACX,KAAK,MAAM,OAAO,OAAO,GAAG,KAAK,MAAM,WAAW,IAAI,KAAK,MAAM,QAAQ,GAAI,gBAAiB,IAAI,EAC7F,KAAWC,GAAU,wBAClB,IAAIC,EAAU,IACTD,GAAA,YAAAA,EAAQ,YAAa,UAAYA,EAAO,WAAa,KAASA,GAAA,YAAAA,EAAQ,YAAa,UACpF,KAAK,MAAM,KAAK,oBAAsB,GACtCC,EAAU,KACHD,GAAA,YAAAA,EAAQ,YAAa,UAAYA,EAAO,WAAa,KAC5D,KAAK,MAAM,KAAK,oBAAsB,GAElC,KAAK,MAAM,KAAK,kBAChB,KAAK,MAAM,KAAK,gBAAkB,GAClCC,EAAU,IAEV,KAAK,MAAM,KAAK,eAChB,KAAK,MAAM,KAAK,aAAe,GAC/BA,EAAU,IAEV,KAAK,MAAM,KAAK,gBAChB,KAAK,MAAM,KAAK,cAAgB,GAChCA,EAAU,IAEV,KAAK,MAAM,KAAK,eAChB,KAAK,MAAM,KAAK,aAAe,GAC/BA,EAAU,IAEV,KAAK,MAAM,KAAK,kBAChB,KAAK,MAAM,KAAK,gBAAkB,GAClCA,EAAU,IAGdA,GAAW,KAAK,MAAM,SAAS,KAAK,MAAM,IAAI,EAE1C,KAAK,MAAM,KAAK,YAAc,UAAY,KAAK,MAAM,KAAK,eAC1D,KAAK,MAAM,KAAK,UAAY,SAC5BA,EAAU,IAEdA,EAAU,KAGVD,GAAA,YAAAA,EAAQ,YAAa,UACrBC,EAAU,GACV,KAAK,MAAM,KAAK,eAAiB,MAC1BD,GAAA,YAAAA,EAAQ,YAAa,QAC5BC,EAAU,GACV,KAAK,MAAM,KAAK,eAAiB,MAErC,MAAMC,EAAU,CAAC,MAAO,QAAS,SAAU,QAAS,WAAY,SAAS,EACzE,QAASC,EAAI,EAAGA,EAAID,EAAQ,OAAQC,IAChC,GAAI,CAAC,KAAK,eAAeD,EAAQC,CAAC,CAAC,EAAG,CAClC,MAAMC,EAAU,MAAM,KAAK,YAAYF,EAAQC,CAAC,EAAG,KAAK,MAAM,IAAI,EAC7D,MAAME,GAAK,KAAK,UAAUA,CAAC,CAAC,EACjCJ,EAAUA,GAAWG,EAAQ,OACjC,CAER,CAAC,GAED,CAAC,KAAK,MAAM,KAAK,aAAe,CAAC,KAAK,eACtC,KAAK,MAAM,OAAO,OAAO,GAAG,KAAK,MAAM,WAAW,IAAI,KAAK,MAAM,QAAQ,GAAI,oBAAqB,IAAI,EACjG,KAAKJ,GAAU,CACRA,GAAA,MAAAA,EAAQ,WAAaA,EAAO,SAAWA,EAAO,WAC9C,KAAK,cAAgB,GACjBA,EAAO,YAAc,QAAUA,EAAO,UAAY,QAClD,KAAK,YAAY,OAAK,EAAE,4EAA6EA,EAAO,QAAQ,EAAG,OAAK,EAAE,uBAAuB,CAAC,EAC/IA,EAAO,YAAc,SAAWA,EAAO,UAAY,SAC1D,KAAK,YAAY,OAAK,EAAE,sHAAuHA,EAAO,QAAQ,EAAG,OAAK,EAAE,uBAAuB,EAAG,SAAS,EAGvN,CAAC,EAGjB,CAEM,mBAAoB,gCACtB,mBAAM,0BAAN,IAAwB,EACpB,KAAK,aACL,KAAK,mBAAmB,CAEhC,CAAC,CAAD,CAEA,YAAa,CACT,OAAI,KAAK,cAAgB,KAAK,MAAM,QAChC,KAAK,YAAc,KAAK,MAAM,MAC1B,KAAK,aACL,KAAK,mBAAmB,GAIzB,KAAK,cAAc,CAC9B,CACJ,CAEAH,EAAwB,UAAY,CAChC,OAAQ,WAAiB,WACzB,UAAW,WACX,UAAW,WACX,MAAO,WACP,UAAW,WACX,KAAM,WAAiB,WACvB,KAAM,WACN,OAAQ,WACR,QAAS,SACT,SAAU,QACd,EAEA,QAAeA,EC3Gf,EAAe,CACX,aAAY,IACZ,UAAS,IACT,aAAY,IACZ,YAAW,IACX,SAAQ,IACR,QAAO,IACP,qBAAoB,IACpB,SAAQ,IACR,cAAa,IACb,wBAAuB,CAC3B,C","sources":["CheckAllConfigInvisible.jsx","Components.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { I18n } from '@iobroker/adapter-react-v5';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nclass CheckAllConfigInvisible extends BaseField {\r\n    constructor(props) {\r\n        super(props);\r\n        this.storedAlive = this.props.alive;\r\n        this.storedChecked = false;\r\n    }\r\n\r\n    checkConfiguration() {\r\n        if (this.props.alive) {\r\n            this.props.socket.sendTo(`${this.props.adapterName}.${this.props.instance}`, 'getSystemInfo', null)\r\n                .then(async result => {\r\n                    let changed = false;\r\n                    if ((result?.systemOS === 'docker' && result.dockerDB === true) || result?.systemOS !== 'docker') {\r\n                        this.props.data._nonSupportDockerDB = false;\r\n                        changed = true;\r\n                    } else if (result?.systemOS === 'docker' && result.dockerDB === false) {\r\n                        this.props.data._nonSupportDockerDB = true;\r\n\r\n                        if (this.props.data.influxDBEnabled) {\r\n                            this.props.data.influxDBEnabled = false;\r\n                            changed = true;\r\n                        }\r\n                        if (this.props.data.mySqlEnabled) {\r\n                            this.props.data.mySqlEnabled = false;\r\n                            changed = true;\r\n                        }\r\n                        if (this.props.data.sqliteEnabled) {\r\n                            this.props.data.sqliteEnabled = false;\r\n                            changed = true;\r\n                        }\r\n                        if (this.props.data.pgSqlEnabled) {\r\n                            this.props.data.pgSqlEnabled = false;\r\n                            changed = true;\r\n                        }\r\n                        if (this.props.data.startAllRestore) {\r\n                            this.props.data.startAllRestore = false;\r\n                            changed = true;\r\n                        }\r\n\r\n                        changed && this.props.onChange(this.props.data);\r\n\r\n                        if (this.props.data.redisType !== 'remote' && this.props.data.redisEnabled) {\r\n                            this.props.data.redisType = 'remote';\r\n                            changed = true;\r\n                        }\r\n                        changed = true;\r\n                    }\r\n\r\n                    if (result?.systemOS === 'docker') {\r\n                        changed = true;\r\n                        this.props.data._restoreIfWait = 10000;\r\n                    } else if (result?.systemOS === 'win') {\r\n                        changed = true;\r\n                        this.props.data._restoreIfWait = 18000;\r\n                    }\r\n                    const CONFIGS = ['ccu', 'mySql', 'sqlite', 'pgSql', 'influxDB', 'history'];\r\n                    for (let c = 0; c < CONFIGS.length; c++) {\r\n                        if (!this.isConfigFilled(CONFIGS[c])) {\r\n                            const _result = await this.fetchConfig(CONFIGS[c], this.props.data)\r\n                                .catch(e => this.showError(e));\r\n                            changed = changed || _result.changed;\r\n                        }\r\n                    }\r\n                });\r\n\r\n            if (!this.props.data.cifsEnabled && !this.storedChecked) {\r\n                this.props.socket.sendTo(`${this.props.adapterName}.${this.props.instance}`, 'getFileSystemInfo', null)\r\n                    .then(result => {\r\n                        if (result?.diskState && result.storage && result.diskFree) {\r\n                            this.storedChecked = true;\r\n                            if (result.diskState === 'warn' && result.storage === 'local') {\r\n                                this.showMessage(I18n.t('On the host only %s MB free space is available! Please check your system!', result.diskFree), I18n.t('BackItUp Information!'));\r\n                            } else if (result.diskState === 'error' && result.storage === 'local') {\r\n                                this.showMessage(I18n.t('On the host only %s MB free space is available! Local backups are currently not possible. Please check your system!', result.diskFree), I18n.t('BackItUp Information!'), 'warning');\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        super.componentDidMount();\r\n        if (this.storedAlive) {\r\n            this.checkConfiguration();\r\n        }\r\n    }\r\n\r\n    renderItem() {\r\n        if (this.storedAlive !== this.props.alive) {\r\n            this.storedAlive = this.props.alive;\r\n            if (this.storedAlive) {\r\n                this.checkConfiguration();\r\n            }\r\n        }\r\n\r\n        return this.renderMessage();\r\n    }\r\n}\r\n\r\nCheckAllConfigInvisible.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default CheckAllConfigInvisible;\r\n","import AdapterExist from './AdapterExist';\r\nimport BackupNow from './BackupNow';\r\nimport DetectConfig from './DetectConfig';\r\nimport CheckConfigInvisible from './CheckConfigInvisible';\r\nimport GoogleDrive from './GoogleDrive';\r\nimport Onedrive from './Onedrive';\r\nimport Dropbox from './Dropbox';\r\nimport Instance from './Instance';\r\nimport RestoreBackup from './RestoreBackup';\r\nimport CheckAllConfigInvisible from './CheckAllConfigInvisible';\r\n\r\nexport default {\r\n    AdapterExist,\r\n    BackupNow,\r\n    DetectConfig,\r\n    GoogleDrive,\r\n    Onedrive,\r\n    Dropbox,\r\n    CheckConfigInvisible,\r\n    Instance,\r\n    RestoreBackup,\r\n    CheckAllConfigInvisible,\r\n};\r\n"],"names":["CheckAllConfigInvisible","BaseField","props","result","changed","CONFIGS","c","_result","e"],"sourceRoot":""}